# agent 的名称
name: "{AgentName:xxAgent}"
# 对 agent 的详细描述
description: "{AgentDescription}"

# 执行上下文参数
params:
  - name: "{param name}"
    type: "{param type}"

# 执行上下文结果
results:
  - name: "{result name}"
    type: "{result type}"

services:
    ''

code:
    '|
    # 请完成下面智能体核心逻辑的代码片段
    def forward(self, history_messages, **kwargs):
            """该代码片段负责将params编写逻辑之后输出为所需的results，其中可能需要调用大模型
            Parameters
                ----------
                history_messages : []
                    当前智能体发送给大模型的历史消息数组，可以按需取用
                kwargs : {}
                    kwargs包含执行上下文中的params

                Returns
                -------
                messages : []
                    本次与大模型交互的messages.
                results : {}
                    results包含执行上下文中的results
            kwargs包含执行上下文中的params，该代码片段负责将params编写逻辑之后输出为所需的results
            """
            # 1. 从上下文中获取param: kwargs[{param name}]
            messages = []
            # 2. 添加提示词messages
            self.add_message("user", f"{{param name}}:{kwargs[{param name}]}", messages)
            # 3. 调用大模型
            response = self.chat_llm(messages)
            # 4. 处理大模型返回的结果
            # 5. 填充结果到results
            results = {
                "{result name}": {result value},
                "{result name}": {result value},
            }
            return messages, results
    '

# agent 的 system prompt
prompts:
  - type: "inline"
    role: "system"
    content: |
      {prompt content}

# agent 使用的工具
tools:
  - type: "VDB"
    name: "VDB1"

# 其他的一些参数
ifLeaf: True
ifService: False
ifKnowledgeable: True
ifLearnable: False
runtimeRevisionNumber: 1
historyNumber: 0
energy: 0

