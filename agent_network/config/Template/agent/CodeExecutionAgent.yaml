# 对外暴露的 id，用于将 agent 引入 group
ref_id: "CodeExecutionAgent"

# agent 的名称
name: "CodeExecutionAgent"
# 对 agent 的详细描述
description: "可以进行 Excel 上的基础操作，如打开、保存、关闭表格，进行内容的输入、复制和粘贴等"
# agent 角色扮演相关？
role: ""
# agent 要执行的任务
task: ""
# agent 加载模式
load_type: "module"
# agent 类的位置
loadModule: "tbot.agent"
loadClass: "CodeExecutionAgent"

# 组内通信配置
# 其实好像不需要配置，因为目前实现的方式是 name + Exchange
communication:
  exchange: "WordOperationAgentExchange"
  queue: "WordOperationAgent"

# agent 是否需要与大模型进行交互
need_chat: True
model: "gpt-3.5-turbo"

init_extra_params:

# 执行上下文参数
params:
  - name: "code"
    type: "list"
  - name: "variables"
    type: "list"

# 执行上下文结果
results:

# 去中心化
services:
    ''

code:
    '|
    def forward(self, message, **kwargs):
            if kwargs["subtasks"] is not None and kwargs["workflow"] is not None:
                return {}
            messages = []
            graph = static.graph
            keys = ["task", "description", "modality", "language", "requirements", "codes", "ideas"]
            for key in keys:
                if kwargs[key]:
                    if "codes" in key:
                        self.add_message("user", f"{{{key}}}:{codes_2_str(kwargs[key])}", messages)
                    else:
                        self.add_message("user", f"{{{key}}}:{kwargs[key]}", messages)
            response = self.chat_llm(messages)
            tasks, subtasks, subtask, workflow, workflow_str = extract_tasks_and_dependencies(response.content)
            # todo 根据tasks创建agent, 根据workflow创建路由
            coding_group_node: Node = graph.get_node("CodingGroup")
            coding_group: BaseAgentGroup = coding_group_node.executable
            for task_id, task_info in tasks.items():
                if task_id not in workflow:
                    workflow[task_id] = {"dependencies": []}
                task_coding_agent = CodingAgent(load_config("config/CodeTeam/CodingAgent.yaml"), static.logger)
                task_id = str(task_id)
                task_coding_agent.name = "CodingAgent for task: " + task_id
                task_coding_agent.description = task_info["description"]
                task_coding_agent.task_id = task_id
                coding_group.add_agent(task_coding_agent.name)
                code_agent_node = AgentNode(task_coding_agent, task_coding_agent.params, task_coding_agent.results)
                graph.add_node(task_coding_agent.name, code_agent_node)
                graph.add_route(self.name, task_coding_agent.name, "message")
                organizer_node: Node = graph.get_node(self.name)
                organizer_node.next_executables.append(task_coding_agent.name)
            results = {
                "subtasks": tasks,
                "workflow": workflow,
            }
            return results
    '

# agent 的 prompt
prompts:

# agent 使用的工具
tools:
  - type: "VDB"
    name: "VDB1"

# 其他的一些参数
ifLeaf: True
ifService: False
ifKnowledgeable: True
ifLearnable: False
runtimeRevisionNumber: 1
historyNumber: 0
energy: 0

